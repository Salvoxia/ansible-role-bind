---
- name: Read forward zone hashes
  ansible.builtin.shell: "grep -s \"^; Hash:\" {{ bind_zone_dir }}/{{ item.name }}{{'.text' if bind_zone_auxiliary[item.name]['masterfile_format'] == 'raw' }} || true"
  changed_when: false
  check_mode: false
  register: forward_hashes_temp
  with_items:
    - "{{ bind_zones }}"
  run_once: true
  loop_control:
    label: "{{ item.name }}"
  tags: bind

- name: Create dict of forward hashes
  ansible.builtin.set_fact:
    forward_hashes: "{{ forward_hashes | default([]) + [{'hash': item.stdout | default(), 'name': item.item.name}] }}"
  with_items:
    - "{{ forward_hashes_temp.results }}"
  run_once: true
  loop_control:
    label: "{{ item.item.name }}"
  tags: bind

- name: Read reverse ipv4 zone hashes
  ansible.builtin.shell: "grep -s \"^; Hash:\" {{ bind_zone_dir }}/{{ ('.'.join(item.1.replace(item.1+'.','').split('.')[::-1])) }}.in-addr.arpa\
                          {{'.text' if bind_reverse_lookup_zone_masterfile_format == 'raw' }} || true"
  changed_when: false
  check_mode: false
  register: reverse_hashes_temp
  with_subelements:
    - "{{ bind_zones }}"
    - networks
    - flags:
      skip_missing: true
  run_once: true
  loop_control:
    label: "{{ item.1 }}"
  tags: bind

- name: Create dict of reverse hashes
  ansible.builtin.set_fact:
    reverse_hashes: "{{ reverse_hashes | default([]) + [ {'hash': item.0.stdout|default(), 'network': item.1} ] }}"
  with_subelements:
    - "{{ reverse_hashes_temp.results }}"
    - item
  run_once: true
  loop_control:
    label: "{{ item.1.name |default(item.0.cmd.split(' ')[4]) }}"
  tags: bind

- name: Read reverse ipv6 zone hashes
  ansible.builtin.shell: "grep -s \"^; Hash:\" {{ bind_zone_dir }}/{{ (item.1 | ansible.utils.ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):-1] }}\
                          {{ '.text' if bind_reverse_lookup_zone_masterfile_format == 'raw' }} || true"
  changed_when: false
  check_mode: false
  register: reverse_hashes_ipv6_temp
  with_subelements:
    - "{{ bind_zones }}"
    - ipv6_networks
    - flags:
      skip_missing: true
  run_once: true
  loop_control:
    label: "{{ item.1 }}"
  tags: bind

- name: Create dict of reverse ipv6 hashes
  ansible.builtin.set_fact:
    reverse_hashes_ipv6: "{{ reverse_hashes_ipv6|default([]) + [ {'hash': item.0.stdout|default(), 'network': item.1} ] }}"
  with_subelements:
    - "{{ reverse_hashes_ipv6_temp.results }}"
    - item
  run_once: true
  loop_control:
    label: "{{ item.1.name |default(item.0.cmd.split(' ')[4]) }}"
  tags: bind

- name: Check if named-checkconf is available
  ansible.builtin.command:
    which named-checkconf
  register: check_named
  failed_when: check_named.rc not in [0,1]
  changed_when: false
  tags: bind

- name: Create lookup zone files (with validation)
  when: check_named.rc == 0
  block:
    - name: Create forward lookup zone file (with validation)
      ansible.builtin.template:
        src: bind_zone.j2
        dest: "{{ bind_zone_dir }}/{{ item.name }}{{'.text' if bind_zone_auxiliary[item.name].masterfile_format == 'raw' }}"
        owner: "{{ (bind_zone_file_owner_override | length > 0) | ternary(bind_zone_file_owner_override, bind_owner) }}"
        group: "{{ (bind_zone_file_group_override | length > 0) | ternary(bind_zone_file_group_override, bind_group) }}"
        mode: "{{ bind_zone_file_mode }}"
        setype: named_zone_t
        validate: 'named-checkzone -d {{ item.name }} %s'
      become: true
      with_items:
        - "{{ bind_zones }}"
      loop_control:
        label: "{{ item.name }}"
      when: >
        (item.create_forward_zones is not defined or item.create_forward_zones) and
        ((item.type is defined and item.type == 'primary') or
        (item.type is not defined and bind_zone_auxiliary[item.name]['primaries_dict'] is defined and
        (host_all_addresses | intersect(bind_zone_auxiliary[item.name]['primaries_dict'].keys()) | length > 0)))
      notify: Reload bind
      register: bind_zone_file_creation_result
      tags: bind

    - name: Create reverse lookup zone file (with validation)
      ansible.builtin.template:
        src: reverse_zone.j2
        dest: "{{ bind_zone_dir }}/{{ ('.'.join(item.1.replace(item.1+'.','').split('.')[::-1])) }}.in-addr.arpa{{'.text' if bind_reverse_lookup_zone_masterfile_format == 'raw' }}"
        owner: "{{ (bind_zone_file_owner_override | length > 0) | ternary(bind_zone_file_owner_override, bind_owner) }}"
        group: "{{ (bind_zone_file_group_override | length > 0) | ternary(bind_zone_file_group_override, bind_group) }}"
        mode: "{{ bind_zone_file_mode }}"
        setype: named_zone_t
        validate: "named-checkzone {{ ('.'.join(item.1.replace(item.1+'.','').split('.')[::-1])) }}.in-addr.arpa %s"
      become: true
      with_subelements:
        - "{{ bind_zones }}"
        - networks
        - flags:
          skip_missing: true
      loop_control:
        label: "{{ item.1 }}"
      when: >
        (item.create_reverse_zones is not defined or item.create_reverse_zones) and
        ((item[0].type is defined and item[0].type == 'primary') or
        (item[0].type is not defined and bind_zone_auxiliary[item[0].name]['primaries_dict'] is defined and
        (host_all_addresses | intersect(bind_zone_auxiliary[item[0].name]['primaries_dict'].keys()) | length > 0)))
      notify: Reload bind
      register: bind_reverse_lookup_file_creation_result
      tags: bind

    - name: Create reverse IPv6 lookup zone file (with validation)
      ansible.builtin.template:
        src: reverse_zone_ipv6.j2
        dest: "{{ bind_zone_dir }}/{{ (item.1 | ansible.utils.ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):-1] }}\
              {{ '.text' if bind_reverse_lookup_zone_masterfile_format == 'raw' }}"
        owner: "{{ (bind_zone_file_owner_override | length > 0) | ternary(bind_zone_file_owner_override, bind_owner) }}"
        group: "{{ (bind_zone_file_group_override | length > 0) | ternary(bind_zone_file_group_override, bind_group) }}"
        mode: "{{ bind_zone_file_mode }}"
        setype: named_zone_t
        validate: "named-checkzone {{ (item.1 | ansible.utils.ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):] }} %s"
      become: true
      with_subelements:
        - "{{ bind_zones }}"
        - ipv6_networks
        - flags:
          skip_missing: true
      loop_control:
        label: "{{ item.1 }}"
      when: >
        (item.create_reverse_zones is not defined or item.create_reverse_zones) and
        ((item[0].type is defined and item[0].type == 'primary') or
        (item[0].type is not defined and bind_zone_auxiliary[item[0].name]['primaries_dict'] is defined and
        (host_all_addresses | intersect(bind_zone_auxiliary[item[0].name]['primaries_dict'].keys()) | length > 0)))
      notify: Reload bind
      register: bind_ipv6_reverse_lookup_file_creation_result
      tags: bind

- name: Create lookup zone files (without validation)
  when: check_named.rc == 1
  block:
    - name: Create forward lookup zone file (without validation)
      ansible.builtin.template:
        src: bind_zone.j2
        dest: "{{ bind_zone_dir }}/{{ item.name }}{{'.text' if bind_reverse_lookup_zone_masterfile_format == 'raw' }}"
        owner: "{{ (bind_zone_file_owner_override | length > 0) | ternary(bind_zone_file_owner_override, bind_owner) }}"
        group: "{{ (bind_zone_file_group_override | length > 0) | ternary(bind_zone_file_group_override, bind_group) }}"
        mode: "{{ bind_zone_file_mode }}"
        setype: named_zone_t
      become: true
      with_items:
        - "{{ bind_zones }}"
      loop_control:
        label: "{{ item.name }}"
      when: >
        (item.create_forward_zones is not defined or item.create_forward_zones) and
        ((item.type is defined and item.type == 'primary') or
        (item.type is not defined and bind_zone_auxiliary[item.name]['primaries_dict'] is defined and
        (host_all_addresses | intersect(bind_zone_auxiliary[item.name]['primaries_dict'].keys()) | length > 0)))
      register: bind_zone_file_creation_result_no_validation
      tags: bind

    - name: Create reverse lookup zone file (without validation)
      ansible.builtin.template:
        src: reverse_zone.j2
        dest: "{{ bind_zone_dir }}/{{ ('.'.join(item.1.replace(item.1+'.','').split('.')[::-1])) }}.in-addr.arpa{{'.text' if bind_reverse_lookup_zone_masterfile_format == 'raw' }}"
        owner: "{{ (bind_zone_file_owner_override | length > 0) | ternary(bind_zone_file_owner_override, bind_owner) }}"
        group: "{{ (bind_zone_file_group_override | length > 0) | ternary(bind_zone_file_group_override, bind_group) }}"
        mode: "{{ bind_zone_file_mode }}"
        setype: named_zone_t
      become: true
      with_subelements:
        - "{{ bind_zones }}"
        - networks
        - flags:
          skip_missing: true
      loop_control:
        label: "{{ item.1 }}"
      when: >
        (item.create_reverse_zones is not defined or item.create_reverse_zones) and
        ((item[0].type is defined and item[0].type == 'primary') or
        (item[0].type is not defined and bind_zone_auxiliary[item[0].name]['primaries_dict'] is defined and
        (host_all_addresses | intersect(bind_zone_auxiliary[item[0].name]['primaries_dict'].keys()) | length > 0)))
      register: bind_reverse_lookup_file_creation_result_no_validation
      tags: bind

    - name: Create reverse IPv6 lookup zone file (without validation)
      ansible.builtin.template:
        src: reverse_zone_ipv6.j2
        dest: "{{ bind_zone_dir }}/{{ (item.1 | ansible.utils.ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):-1] }}\
                {{ '.text' if bind_reverse_lookup_zone_masterfile_format == 'raw' }}"
        owner: "{{ (bind_zone_file_owner_override | length > 0) | ternary(bind_zone_file_owner_override, bind_owner) }}"
        group: "{{ (bind_zone_file_group_override | length > 0) | ternary(bind_zone_file_group_override, bind_group) }}"
        mode: "{{ bind_zone_file_mode }}"
        setype: named_zone_t
      become: true
      with_subelements:
        - "{{ bind_zones }}"
        - ipv6_networks
        - flags:
          skip_missing: true
      loop_control:
        label: "{{ item.1 }}"
      when: >
        (item.create_reverse_zones is not defined or item.create_reverse_zones) and
        ((item[0].type is defined and item[0].type == 'primary') or
        (item[0].type is not defined and bind_zone_auxiliary[item[0].name]['primaries_dict'] is defined and
        (host_all_addresses | intersect(bind_zone_auxiliary[item[0].name]['primaries_dict'].keys()) | length > 0)))
      register: bind_ipv6_reverse_lookup_file_creation_result_no_validation
      tags: bind

- name: Check if named-compilezone is available
  ansible.builtin.command:
    which named-compilezone
  register: check_named
  failed_when: check_named.rc not in [0,1]
  changed_when: false
  tags: bind

- name: Compile zone files (if raw format)
  when: check_named.rc == 0
  tags: bind
  block:
    - name: Compile forward lookup zone files
      ansible.builtin.command: "named-compilezone -f text -F raw -o {{ bind_zone_dir }}/{{ zone_file.item.name }} {{ zone_file.item.name }} {{ zone_file.dest }}"
      when:
        - zone_file.changed
        - bind_zone_auxiliary[zone_file.item.name].masterfile_format == 'raw'
      changed_when: zone_file.changed
      with_items: "{{ bind_zone_file_creation_result.results + bind_zone_file_creation_result_no_validation.results }}"
      loop_control:
        loop_var: zone_file

    - name: Compile reverse lookup zone files
      ansible.builtin.command: "named-compilezone -f text -F raw -o {{ zone_file.dest | regex_replace('^(.*)\\.text$', '\\1') }}
                              {{ zone_file.dest | regex_search('([^\/]+(?=\/$|\\.text$))', '\\1') | first }} {{ zone_file.dest }}"
      when:
        - zone_file.changed
        - bind_reverse_lookup_zone_masterfile_format == 'raw'
      changed_when: zone_file.changed
      with_items: "{{ bind_reverse_lookup_file_creation_result.results + bind_reverse_lookup_file_creation_result_no_validation.results }}"
      loop_control:
        loop_var: zone_file

    - name: Compile IPv6 reverse lookup zone files
      ansible.builtin.command: "named-compilezone -f text -F raw -o {{ zone_file.dest | regex_replace('^(.*)\\.text$', '\\1') }}
                              {{ zone_file.dest | regex_search('([^\/]+(?=\/$|\\.text$))', '\\1') | first }} {{ zone_file.dest }}"
      when:
        - zone_file.changed
        - bind_reverse_lookup_zone_masterfile_format == 'raw'
      changed_when: zone_file.changed
      with_items: "{{ bind_ipv6_reverse_lookup_file_creation_result.results + bind_ipv6_reverse_lookup_file_creation_result_no_validation.results }}"
      loop_control:
        loop_var: zone_file
