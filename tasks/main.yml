---
# Initialise distribution-specific variables
- name: Source specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "{{ ansible_distribution_file_variety }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution_file_variety }}.yml"
  tags: bind


- name: Check `primaries` or `forwarders` was set for each zone
  ansible.builtin.assert:
    that:
      - (item.type is defined and item.type == 'primary') or item.primaries is defined or item.forwarders is defined
    quiet: true
  loop: "{{ bind_zones }}"
  loop_control:
    label: "{{ item.name }}"
  tags: bind

# Fix molecule and ci failures
- name: Update package cache for Debian based distros
  ansible.builtin.apt:
    update_cache: true
  become: true
  changed_when: false
  when:
    - bind_manage_service
    - ansible_os_family == 'Debian'
  tags: bind

- name: Assert that all XFR keys exist in the key list
  ansible.builtin.assert:
    that: bind_dns_keys | selectattr("name","equalto",bind_key_mapping[item]) | list | count > 0
  loop: "{{ bind_key_mapping.keys() | list }}"
  when: bind_key_mapping | list | count > 0

- name: Install BIND
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  become: true
  when: bind_manage_service
  with_items:
    - "{{ bind_packages }}"
  tags: bind

- name: Ensure bind_group exists
  ansible.builtin.group:
    name: "{{ bind_group }}"
    state: present
  when: not bind_manage_service

- name: Ensure bind_owner exists
  ansible.builtin.user:
    name: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    create_home: false
    state: present
  when:
    - bind_owner != 'root'
    - not bind_manage_service

- name: Ensure runtime directories referenced in config exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "0770"
  become: true
  with_items:
    - "{{ bind_dir }}/dynamic"
    - "{{ bind_dir }}/data"
    - "{{ bind_zone_dir }}"
  tags: bind

- name: Ensure Directory for Cached Secondary Zones exists
  ansible.builtin.file:
    path: "{{ bind_secondary_dir }}"
    state: directory
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "0770"
    setype: named_cache_t
  become: true
  tags: bind

- name: Create serial, based on UTC UNIX time
  ansible.builtin.command: date -u +%s
  register: timestamp
  changed_when: false
  run_once: true
  check_mode: false
  tags: bind

- name: Ensure bind_conf_dir exists
  ansible.builtin.file:
    path: "{{ bind_conf_dir }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "02755"
    state: directory
  when: not bind_manage_service

# file to set keys for XFR authentication
- name: Create extra config for authenticated XFR request
  ansible.builtin.template:
    src: auth_transfer.j2
    dest: "{{ bind_conf_dir }}/{{ auth_file }}"
    mode: "0640"
    owner: root
    group: "{{ bind_group }}"
  become: true
  when: bind_dns_keys is defined and bind_dns_keys|length > 0
  notify: Reload bind
  tags: bind

- name: Gather current service facts
  ansible.builtin.service_facts:

- name: Get my public IP
  community.general.ipify_facts:

- name: Set list of all host IP addresses
  ansible.builtin.set_fact:
    host_all_addresses: "{{ [ipify_public_ip] | union(ansible_all_ipv4_addresses | union(ansible_all_ipv6_addresses)) }}"
  tags: bind

- name: Initialize bind_zone_auxiliary
  ansible.builtin.set_fact:
    bind_zone_auxiliary: {}

- name: Build auxiliary zone dictionary (creates fact bind_zone_auxiliary)
  ansible.builtin.include_tasks: "build_host_dicts.yml"
  loop: '{{ bind_zones }}'
  loop_control:
    loop_var: zone

- name: Freeze dynamic zones
  ansible.builtin.command:
    cmd: 'rndc freeze {{ item.name }}'
  become: true
  failed_when: false
  changed_when: false
  when: >-
    bind_manage_service and
    (((item.type is defined and item.type == 'primary') or
    (item.type is not defined and bind_zone_auxiliary[item.name]['primaries_dict'] is defined and
    (host_all_addresses | intersect(bind_zone_auxiliary[item.name]['primaries_dict'].keys()) | length > 0))) and
    (ansible_facts.services[bind_service].state == "running") and (item.allow_update | default(false)))
  with_items: '{{ bind_zones }}'
  tags: bind

# file to load tsig keys for zone authentication/dynamic/secure update
- name: Create file for tsig keys for authenticated dynamic updates
  ansible.builtin.template:
    src: tsig_keys.j2
    dest: "{{ bind_conf_dir }}/{{ tsig_file }}"
    mode: "0640"
    owner: root
    group: "{{ bind_group }}"
  become: true
  when: bind_tsig_keys is defined and bind_tsig_keys|length > 0
  notify: Reload bind
  tags: bind

- name: Configure zones
  ansible.builtin.include_tasks: "zones.yml"
  tags: bind

- name: Check if named-checkconf is available
  ansible.builtin.command:
    which named-checkconf
  register: check_named
  failed_when: check_named.rc not in [0,1]
  changed_when: false

- name: Main BIND config file (with validation)
  ansible.builtin.template:
    src: etc_named.conf.j2
    dest: "{{ bind_config }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "0640"
    setype: named_conf_t
    validate: 'named-checkconf %s'
  become: true
  notify: Reload bind
  when: check_named.rc == 0
  tags: bind

- name: Main BIND config file (without validation)
  ansible.builtin.template:
    src: etc_named.conf.j2
    dest: "{{ bind_config }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "0640"
    setype: named_conf_t
  become: true
  notify: Reload bind
  when: check_named.rc != 0
  tags: bind

- name: Start BIND service
  ansible.builtin.service:
    name: "{{ bind_service }}"
    state: started
    enabled: true
  become: true
  tags: bind
  when: bind_manage_service
  retries: 5
  delay: 5
  register: start_service_result
  until: start_service_result is not failed

- name: Flush handlers to reload BIND
  ansible.builtin.meta: flush_handlers

- name: Synchronize dynamic zones
  ansible.builtin.include_tasks: "sync_dynamic_zones.yml"
  when: bind_manage_service

- name: Thaw dynamic zones
  ansible.builtin.command:
    cmd: 'rndc thaw {{ item.name }}'
  become: true
  changed_when: false
  when: >-
    bind_manage_service and
    (((item.type is defined and item.type == 'primary') or
    (item.type is not defined and bind_zone_auxiliary[item.name]['primaries_dict'] is defined and
    (host_all_addresses | intersect(bind_zone_auxiliary[item.name]['primaries_dict'].keys()) | length > 0))) and
    (ansible_facts.services[bind_service].state == "running") and (item.allow_update | default(false)))
  with_items: '{{ bind_zones }}'
  tags: bind
